/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.automovil.igu;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import com.mycompany.automovil.logica.Auto2;
import com.mycompany.automovil.logica.Conexion;
import com.mycompany.automovil.logica.Controladora;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
//import java.io.FileOutputStream;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Stream;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.Style;

/**
 *
 * @author diazj
 */
public class VerCatalogo extends javax.swing.JFrame {

    MenuPrincipal menu;
    Modificar pantallaModif;
    Controladora control = null;
    Conexion conexion;
    /**
     * Creates new form VerCatalogo
     */
    public VerCatalogo() {
        control = new Controladora();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        titulo = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaAutos = new javax.swing.JTable();
        btnExportarPDF = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        btnAtras = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();
        menuFile = new javax.swing.JMenu();
        menuEdit = new javax.swing.JMenu();
        menuEliminar = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        titulo.setFont(new java.awt.Font("SansSerif", 1, 36)); // NOI18N
        titulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titulo.setText("Catalogo");

        jPanel2.setBackground(new java.awt.Color(153, 102, 255));
        jPanel2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        tablaAutos.setAutoCreateRowSorter(true);
        tablaAutos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tablaAutos);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 504, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        btnExportarPDF.setBackground(new java.awt.Color(255, 102, 102));
        btnExportarPDF.setFont(new java.awt.Font("SansSerif", 3, 14)); // NOI18N
        btnExportarPDF.setText("Exportat PDF");
        btnExportarPDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportarPDFActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(btnExportarPDF)
                .addContainerGap(53, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(titulo, javax.swing.GroupLayout.PREFERRED_SIZE, 453, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(159, 159, 159))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(titulo, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnExportarPDF, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(59, 59, 59))
        );

        jMenuBar1.setBackground(new java.awt.Color(153, 102, 255));

        btnAtras.setText("Atras");
        btnAtras.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAtrasMouseClicked(evt);
            }
        });
        jMenuBar1.add(btnAtras);
        jMenuBar1.add(jMenu4);
        jMenuBar1.add(jMenu5);

        menuFile.setText("File");
        jMenuBar1.add(menuFile);

        menuEdit.setText("Edit");
        menuEdit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuEditMouseClicked(evt);
            }
        });
        jMenuBar1.add(menuEdit);

        menuEliminar.setText("Eliminar");
        menuEliminar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuEliminarMouseClicked(evt);
            }
        });
        jMenuBar1.add(menuEliminar);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnExportarPDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportarPDFActionPerformed
    Document documento = new Document();
    try{
        String ruta = System.getProperty("user.home");
        PdfWriter.getInstance(documento, new FileOutputStream(ruta + "/Desktop/Catalogo_autos8.pdf"));
        documento.open();
        
        Font font = FontFactory.getFont(FontFactory.COURIER, 16, BaseColor.BLACK);
        Chunk title = new Chunk("Catalogo Actual", font);
        Paragraph vacio1 = new Paragraph();
        vacio1.add("\n\n");
        

        
        documento.add(title);
       documento.add(vacio1);
        
        
        PdfPTable tabla = new PdfPTable(7);
        tabla.addCell("Id");
        tabla.addCell("AÃ±o");
        tabla.addCell("Num. Puertas");
        tabla.addCell("Color");
        tabla.addCell("Marca");
        tabla.addCell("Motor");
        tabla.addCell("Placa");
        
        try{
             conexion = new Conexion();
              Connection conectar = conexion.abrirConexion();
               
              PreparedStatement seleccionar = conectar.prepareStatement("select * from auto2");
              ResultSet consultar = seleccionar.executeQuery();
              
              if(consultar.next()){
                  do{
                      tabla.addCell(consultar.getString(1));
                      tabla.addCell(consultar.getString(2));
                      tabla.addCell(consultar.getString(3));
                      tabla.addCell(consultar.getString(4));
                      tabla.addCell(consultar.getString(5));
                      tabla.addCell(consultar.getString(6));
                      tabla.addCell(consultar.getString(7));
                  }while(consultar.next());
                  documento.add(tabla);
              }else{
                  JOptionPane.showMessageDialog(null, "No existen datos");
              }
               
             
        }catch(SQLException e){
            
        }
        documento.close();
        conexion.cerrarConexion();
        JOptionPane.showMessageDialog(null, "Reporte creado con exito");
    }catch(Exception e){
        
    }
    
    }//GEN-LAST:event_btnExportarPDFActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
       cargarTabla();
    }//GEN-LAST:event_formWindowOpened

    private void btnAtrasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAtrasMouseClicked
        menu = new MenuPrincipal();
        menu.setVisible(true);
        menu.setLocationRelativeTo(null);
        this.dispose();
    }//GEN-LAST:event_btnAtrasMouseClicked

    private void menuEditMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuEditMouseClicked
        //Looks that the table isn't empty
        if(tablaAutos.getRowCount()>0){
            //Looks that  a car has been selected
            if(tablaAutos.getSelectedRow()!=-1){
                //Gets the id of the car selected
                int id_car = Integer.parseInt(String.valueOf(tablaAutos.getValueAt(tablaAutos.getSelectedRow(), 0)));
                
                pantallaModif = new Modificar(id_car);
                pantallaModif.setVisible(true);
                pantallaModif.setLocationRelativeTo(null);
                
                this.dispose();
            }
            else{
                mostrarMensaje("No selecciono ningun Auto", "Error", "Error al eliminar");
            }
    }                                           
        else{
            mostrarMensaje("No hay nada para eliminar en la tabla", "Error", "Error al eliminar");
        }
        
            
        
    }//GEN-LAST:event_menuEditMouseClicked

    private void menuEliminarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuEliminarMouseClicked
        //Looks that the table isn't empty
        if(tablaAutos.getRowCount()>0){
            //Looks that a car has been selected
            if(tablaAutos.getSelectedRow()!=-1){
                //Gets the id of the selected car
                int  id_car = Integer.parseInt(String.valueOf(tablaAutos.getValueAt(tablaAutos.getSelectedRow(), 0)));
                
                //Calls the borrar method
                control.borrarAuto(id_car);
                
                 //Aviso al usuario que borro correctamente
                mostrarMensaje("Auto eliminado correctamente", "Info", "Borrado de Auto");
                
                cargarTabla();
                
            }
            else{
                mostrarMensaje("No selecciono ningun auto", "Error", "Error al eliminar");
            }
    }                                           
        else{
          mostrarMensaje("No hay nada para eliminar en la tabla", "Error", "Error al eliminar");  
       
        }
    }//GEN-LAST:event_menuEliminarMouseClicked

  
  /**
    It creates an instance of the JOption class that will open a window.
    This method uses three parameters (mensaje, tipo y titulo).
    Then we compare if the data typed in the tipo parameter is equals to "info". If it is, The message it'll show
    will be of the type "INFORMATION_MESSAGE". Else, if it is equal to "Error" it'll show an "ERROR_MESSAGE".
    Then it creates an instance of the JDialog class to set the title and set it visible.
     */
    public void mostrarMensaje(String mensaje, String tipo, String titulo){
        JOptionPane optionPane = new JOptionPane(mensaje);
        if(tipo.equals("Info")){
            optionPane.setMessageType(JOptionPane.INFORMATION_MESSAGE);
        }
        else if(tipo.equals("Error")){
             optionPane.setMessageType(JOptionPane.ERROR_MESSAGE);
        }
        JDialog dialog = optionPane.createDialog(titulo);
        dialog.setAlwaysOnTop(true);
        dialog.setVisible(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu btnAtras;
    private javax.swing.JButton btnExportarPDF;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenu menuEdit;
    private javax.swing.JMenu menuEliminar;
    private javax.swing.JMenu menuFile;
    private javax.swing.JTable tablaAutos;
    private javax.swing.JLabel titulo;
    // End of variables declaration//GEN-END:variables

/**
     * This method:
     * - Defines a default model for our table.
     * - Makes the cells uneditable.
     * - Establishes the column titles
     * - Creates a list that brings all the elements form the data base
     * - Makes a route through all the elements of the list and creates an object
     *   from the Object class to store the data from each element of the list (This because
     *   not every data from the elements is from the same data type, so the object class can 
     *   store the data of different data types)
     * - Finally, it sets the model into the real table
     * 
     */
   public void cargarTabla(){
       //Define the model we want for our table
       DefaultTableModel modeloTabla = new DefaultTableModel(){
           
           //Makes the cells uneditable
           @Override
           public boolean isCellEditable(int row, int column){
               return false;
           }
       };
       
       //Establish the column names
       String[] titulos = {"Id", "AÃ±o", "Marca", "Color", "Motor", "Placa", "Num. Puertas"};
       modeloTabla.setColumnIdentifiers(titulos);
       
       //Brings the data from the data base
       List<Auto2> listaAutos = control.traerAutos();
       
       //Pass through all the list and shows each element of the table
       if(listaAutos!= null){
           for(Auto2 auto: listaAutos){
               Object[] objeto = {auto.getId(), auto.getAnio(), auto.getMarca(), auto.getColor(), auto.getMotor(),
               auto.getPlaca(), auto.getCantPuertas()};
               
               modeloTabla.addRow(objeto);
           }
           }
       //Sets the model in the actual table
       tablaAutos.setModel(modeloTabla);
       }

    private void addTableHeader(PdfPTable table) {
        Stream.of("Id", "AÃ±o", "Marca", "Color", "Motor",
                "Placa", "Num. Puertas")
                .forEach(columnTitle -> {
                    PdfPCell header = new PdfPCell();
                    header.setBackgroundColor(BaseColor.DARK_GRAY);
                    header.setBorderWidth(2);
                    header.setPhrase(new Phrase(columnTitle));
                    table.addCell(header);
                });
    }

    private void addRows(PdfPTable table) {
        if(tablaAutos.getRowCount()>0){
            int i=0;
            do{
               
                Object[] a = {tablaAutos.getValueAt(i, 0),
                                tablaAutos.getValueAt(i, 1),
                                tablaAutos.getValueAt(i, 2),
                                tablaAutos.getValueAt(i, 3),
                                tablaAutos.getValueAt(i, 4),
                                tablaAutos.getValueAt(i, 5),
                                tablaAutos.getValueAt(i, 6),
                               };
           table.addCell((String.valueOf(a[0])));
           table.addCell((String.valueOf(a[1])));
           table.addCell((String.valueOf(a[2])));
           table.addCell((String.valueOf(a[3])));
           table.addCell((String.valueOf(a[4])));
           table.addCell((String.valueOf(a[5])));
           table.addCell((String.valueOf(a[6])));

            i++;
            }while(i != tablaAutos.getRowCount());
        }
    }

    private void addCustomRows(PdfPTable table) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

   
   
}

